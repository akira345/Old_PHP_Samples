<?php
//Mooゲームプログラム関数Ver2.0
//Copyright(C) 2003 Akira345
//引数：正解（２桁以上９桁以下）、プレイヤーが入力した数値
//！！注意！！
//返値は必ずlistで受けること。この関数は返値として複数の値を返します。
//エラー発生時は、エラーコード以外の返値は全て0を返します。呼び出しの際はエラーコードのチェックを必ず行って下さい。
//返値：正解フラグ（１：正解、０：不正解）、ヒット数、ブロー数、エラーコード
//エラーコード
//０：正常、１：入力された数値の桁数と規定の桁数が一致しないか数値が不正、２：桁数が不正、４：内部エラー
//使用法：
//list($flag,$hit,$blow,$errorcode)=moogame(,3,$input_value);
function moogame($set_value,$input_value)
{

//初期パラメーター設定
$errorcode=0;
$hit=0;
$blow=0;
$winner=0;
	//////////パラメーターチェック部//////////
	$keta=strlen($set_value);//正解の桁数をチェック
	if ($keta=="" or $keta<2 or $keta>9)//桁数が不正だったら
	{
	$errorcode=2;//エラーコードを設定
	return array(0,0,0,$errorcode);//返値を設定（実はこの段階で関数は終了する。exit命令はいらなかったりする・・・）
	exit;//強制終了
	}

	//入力値チェック
	if (strlen($input_value)!=$keta)//入力された値の桁数が規定の桁数と違っていたら
	{
	$errorcode=1;//エラーコードを設定
	return array(0,0,0,$errorcode);//返値を設定（実はこの段階で関数は終了する。exit命令はいらなかったりする・・・）
	exit;//強制終了
	}
	//////////パラメーターチェック部//////////

	//////////正解か判定部//////////
	if ($set_value==$input_value)//正解の数と入力された数が等しければ
	{
	$winner=1;//正解フラグをあげる
	}
	else
	{
	$winner=0;//不正解フラグをあげる
	}
	//////////正解か判定部//////////

	//////////ヒットとブローの計算部//////////
	for ($i=0;$i<$keta;++$i)		//入力桁数回ループを回す
	{
		for ($j=0;$j<$keta;++$j)	//正解桁数回ループを回す
		{
		$chk=substr($input_value,$i,1);	//入力数から$i桁目を取り出す
		$chk1=substr($set_value,$j,1);	//正解数から$j桁目を取り出す
			if ($chk==$chk1)	//もし、取り出した数字が等しければ
			{
				if ($i==$j)	//もし、取り出した位置（桁）が同じならば
				{
				$hit=$hit+1;	//ヒットの数に１足す
				}
				else
				{
				$blow=$blow+1;	//ブローの数に１足す
				}

			}
		}
	}
	//////////ヒットとブローの計算部//////////

	//////////返値の設定//////////
	$errorcode=0;//正常終了コードを設定
	return array($winner,$hit,$blow,$errorcode);//返値を設定
	//////////返値の設定//////////

//////////関数終了//////////
//The End Of Function
}

//ランダム生成ルーチンVer2.0
//Copyright(C) 2003 Akira345
//引数：生成する桁数（２以上９以下）
//！！注意！！
//返値は必ずlistで受けること。この関数は返値として複数の値を返します。
//エラー発生時は、エラーコード以外の返値は全て0を返します。呼び出しの際はエラーコードのチェックを必ず行って下さい。
//返値：指定された桁数の重複しない数列、エラーコード
//エラーコード
//０：正常終了、１：引数が不正、２：内部エラー
//使用法：
//list($set_value,$errorcede)=value_generate($keta)
//
function value_generate($keta)
{
$errorcode=0;
	//////////引数チェック//////////
	if ($keta<2 or $keta>9)//引数が２以下か９以上なら
	{
	$errorcode=1;//エラーコードを設定
	return array(0,$errorcode);//返値を設定
	exit;//強制終了
	}
	//////////引数チェック//////////

	//////////乱数初期化//////////
	/***********************************************
	//乱数初期化：ＰＨＰドキュメントより抜粋

	//大まかな説明：
	//マイクロタイムを取得し、それを基にシードを作成し、乱数を初期化している・・・みたい

	//引数：無し
	//返り値：?
	***********************************************/
	// マイクロでシードを設定する
	 function make_seed() {
	     list($usec, $sec) = explode(' ', microtime());
	     return (float) $sec + ((float) $usec * 100000);
	 }
	srand(make_seed());//シードから乱数初期化
	//////////乱数初期化//////////

	//////////ランダム生成ルーチン//////////
	$keta=$keta+1;//ループの終了条件の関係から１つ値を増やす
	$tmp[1]=rand(1,9);//１桁目の１以上９以下の整数の乱数を発生
	$i=2;//次の桁数を指す
	$c=0;//安全装置のカウンターを初期化
	while ($i<$keta)//桁数回ループ
	{

	////無限ループ防止用安全装置////
	$c=$c+1;//トラップ用カウンター変数を増やす
		if ($c>100)
		{
		$errorcode=9;//エラーコードを設定
		return array(0,$errorcode);//返値を設定
		exit;//強制終了
		}
	////無限ループ防止用安全装置////

	$tmp[$i]=rand(1,9);//２桁目以降を設定
	////設定した数に重複がないかチェック////
			///終了条件設定///
			$end_value=$i-1;
		for ($j=1;$j<$i;++$j)
		{
			if ($tmp[$j]==$tmp[$i])//もし、重複があったら
			{
			break;//重複チェックルーチンを抜ける
			}
			else
			{
				if ($j==$end_value)//全部チェックしたら
				{
				$i=$i+1;//桁数を一つ増やす
				}
			}
		}
	////設定した数に重複がないかチェック////

	}
	//////////ランダム生成ルーチン//////////

	//////////配列を数列に変換//////////
	for ($i=1;$i<$keta;++$i)//桁数回ループ
	{
	$out_value=$out_value.$tmp[$i];//配列の文字を順に結合していく
	}
	//////////配列を数列に変換//////////

	//////////返値を設定//////////
	$errorcode=0;//正常終了を設定
	return array($out_value,$errorcode);//返値を設定
	//////////返値を設定//////////

//The End Of Function
}